1. 데이터 입력 / 수정 / 삭제 – INSERT, UPDATE, DELETE문

SQL의 DML문은 INSERT(입력) , UPDATE(수정), DELETE (삭제), MERGE(조건에 따라 INSERT와 UPDATE 동시에 수행) 의 기능으로 분류됩니다.

### INSERT 문

## 특징

- 기본적으로 하나의 INSERT 문장은 한 개의 ROW 입력
- INSERT 구문 종류에 따라 한 INSERT 문장으로 여러 개의 ROW를 동시에 입력 가능
- 구문형식

INSERT INTO 테이블명 (컬럼1, 컬럼2, …) VALUES (값1, 값2, ….)

- 컬럼1, 컬럼2와 값1, 값2의 개수, 순서, 데이터 형태 일치
- 테이블 명 다음 (컬럼1, 컬럼2, …) 부분은 생략 가능, 생략 시 모든 컬럼 값 입력
- NOT NULL 속성인 컬럼은 반드시 입력해야 함

### INSERT 구문 연습 1.1

**INSERT INTO EMP ( emp_no, emp_name, salary, hire_date)

**VALUE* (1, '홍길동', 1000, '2020-06-01');

※ hire_date는 date 형이지만 묵시적 형변환이 적용되어 문자형 값인 '2019-01-01'이 날짜로 자동 변환

### INSERT 구문 연습 1.2

**INSERT INTO EMP ( emp_no, emp_name)

**VALUES (2, '김유신');

※ 테이블의 일부 컬럼만 선정해 입력 가능 (나머지 부분은null 값으로 출력)

### INSERT 구문 연습 1.3

**INSERT INTO EMP** ( emp_name, emp_no )

**VALUES** ('강감찬', 3);

※ 테이블 생성 시 컬럼 순서대로 입력할 필요없고, 입력하려는 컬럼과 입력된 값의 순서만 맞추면 OK

### INSERT 구문 연습 1.4

**INSERT INTO** EMP

**VALUES** (4, '세종대왕', 1000, SYSDATE);

※ 컬럼명 생략 시, VALUES 절에는 테이블의 모든 컬럼에 입력될 값을 명시해야 함. 입력 순서는 테이블 생성 시 기술한 컬럼 순서

### INSERT 구문 연습 1.5

**INSERT INTO** EMP ( emp_no, salary, hire_date)

**VALUES** (5, 1000, SYSDATE);

※ emp_name 컬럼은 Not Null 컬럼, 따라서 반드시 입력해야 하는데, 누락해서 오류 발생

### INSERT 구문 연습 1.6

**INSERT INTO** EMP

**VALUES** (4, '신사임당', 1000, SYSDATE);

※ emp_no에 4를 입력했으나, 이미 입력되어 있음. 기본 키 컬럼은 중복 값을 허용하지 않음

### INSERT 구문 연습 1.7

**INSERT INTO** EMP

**VALUES** (5, '신사임당', 1000, **TO_DATE**('2020-06-29 19:54:30', 'YYYY-MM-DD HH24:MI:SS'));

※ hire_date 입력 시, TO_DATE 함수를 사용해 정확한 날짜 형식을 주고 입력 (문자형 > 숫자형)

### INSERT 구문 2

- 구문형식

**INSERT INTO** 테이블명 (컬럼1, 컬럼2, …)

**SELECT** exp1, exp2, ..

**FROM** …

- 한 번 실행 시 여러 개의 ROW 입력 가능 -> SELECT 문이 반환하는 데이터에 따라 좌우
- 컬럼1, 컬럼2, …와 exp1, exp2, … 는 개수, 순서, 데이터 형이 일치
- 테이블명 다음 (컬럼1, 컬럼2, …) 부분은 생략 가능, 생략 시 모든 컬럼 값 입력
- NOT NULL 속성인 컬럼은 반드시 입력

### INSERT 구문 연습 2.1

**INSERT INTO** EMP

**SELECT** emp_no + 10, emp_name, salary, hire_date

**FROM** EMP;

※ 기존에 입력된 5건을 select 해 다시 입력. 단, emp_no 기본 키 컬럼 중복 값 입력 방지를 위해 기존 값에 + 10 해서 입력 (1~5, 11~15)

### INSERT 구문 연습 2.2

TRUNCATE TABLE EMP;                         ## EMP TABLE 전체 삭제

**INSERT INTO** EMP

**SELECT** employee_id, first_name || ' ' || last_name, salary, hire_date

**FROM** EMPLOYEES

WHERE department_id = 90;

※ employees 테이블에서 부서번호가 90번인 사원의 데이터를 조회해 emp 테이블에 입력

### INSERT 구문 연습 2.3

**INSERT** INTO EMP

**SELECT** employee_id, first_name || ' ' || last_name, salary, hire_date

**FROM** employees;

※ employees 테이블에서 90번 부서 사원 이미 입력. 다시 전체 사원 입력을 시도하니 기본키인 emp_no 중복 값 오류 발생 (무결성 제약조건 (HR.EMP_PK)

### INSERT 구문 연습 2.4

실습용 EMP_INFO1 테이블 생성

**INSERT INTO** EMP_INFO1

**SELECT** a.employee_id,

a.first_name || ' ' || a.last_name,

a.salary, a.hire_date, b.department_name,

d.country_name

**FROM** employees a, departments b, locations c, countries d

**WHERE** a.department_id = b.department_id

AND b.location_id = c.location_id

AND c.country_id = d.country_id;

※ 조인을 사용한 쿼리를 사용해 그 결과를 emp_info1 테이블에 입력

### INSERT 구문 3

- 한 번 실행 시 여러 테이블에 동시 INSERT
- 컬럼과 값의 쌍 개수, 순서 데이터 형이 맞아야 함
- 입력하고자 하는 컬럼은 조정 가능
- 실제 사용하는 경우는 별로 없음
- 구문형식
- **INSERT ALL**

**INTO** 테이블명1 (컬럼1, 컬럼2, …)

VALUES ( 값1, 값2, …)

**INTO** 테이블명2 (컬럼1, 컬럼2, …)

VALUES ( 값1, 값2, …)

….

**SELECT** exp1, exp2, ..

**FROM** …

SELECT 절을 INTO에 넣어서 각각의 테이블명1,2의 결과값을 도출한다.

### INSERT 구문 3.1

EMP1, 2, 3 테이블을 미리 생성한다.

**INSERT ALL**

**INTO** **EMP1** (emp_no, emp_name, salary, hire_date)

VALUES (emp_no, emp_name, salary, hire_date)

**INTO** **EMP2** (emp_no, emp_name, salary, hire_date)

VALUES (emp_no, emp_name, salary, hire_date)

**SELECT** employee_id emp_no,

first_name || ' ' || last_name emp_name, salary, hire_date

**FROM** employees;

※ SELECT 절을 INTO에 넣어서 각각의 EMP1, 2의 결과값을 도출한다.

### INSERT 구문 3.2

**INSERT ALL**

**INTO** **EMP1** (emp_no, emp_name, salary, hire_date)

VALUES (emp_no, emp_name, salary, hire_date)

**INTO** **EMP2** (emp_no, emp_name, salary, hire_date)

VALUES (emp_no, emp_name, salary, hire_date)

**INTO** **EMP3** (emp_no, emp_name)

VALUES (emp_no, emp_name, salary, hire_date)

**SELECT** employee_id emp_no,

first_name || ' ' || last_name emp_name, salary, hire_date

**FROM** employees;

※ SELECT 절을 INTO에 넣어서 각각의 EMP1, 2, 3의 결과값을 도출한다.

EMP3에는 salary, hire_date가 없음으로 SELECT 문이 적용이 되면 salary, hire_date는 null값으로

뜬다.

### INSERT 구문 4.1 (구문3 + WHEN 조건)

- WHEN 조건을 체크해 조건이 맞으면 INSERT
- WHEN 조건과 INTO 절을 여러 개 명시할 수 있음
- 한 번 실행 시 여러 테이블에 동시 INSERT
- ELSE 절 추가 가능
- INSERT4 구문형식

**INSERT ALL**

**WHEN** 조건1 **THEN**

**INTO** 테이블명1 (컬럼1, 컬럼2, …)

**VALUES** ( 값1, 값2, …)

**WHEN** 조건2 **THEN**

**INTO** 테이블명2 (컬럼1, 컬럼2, …)

**VALUES** ( 값1, 값2, …)

**ELSE INTO** …

….

**SELECT** exp1, exp2, ..

**FROM** …

### INSERT 구문 4.2 (구문4.2 – ALL + FIRST)

**INSERT FIRST**

**WHEN** 조건1 **THEN**

**INTO** 테이블명1 (컬럼1, 컬럼2, …)

**VALUES** ( 값1, 값2, …)

**WHEN** 조건2 **THEN**

**INTO** 테이블명2 (컬럼1, 컬럼2, …)

**VALUES** ( 값1, 값2, …)

**ELSE INTO** …

….

**SELECT** exp1, exp2, ..

**FROM** …

- ALL 대신 FIRST 사용
- 첫 번째 WHEN 조건을 만족하면 이후 INTO 절 수행
- 첫 번째 조건을 만족한 데이터(ROW)가 두 번째 조건을 만족하더라도 두 번째 테이블에는 INSERT 되지 않음
- CASE 표현식과 동작 방식 흡사

TRUNCATE TABLE emp1; TRUNCATE TABLE emp2; TRUNCATE TABLE emp3;

**INSERT ALL**

**WHEN** **dept_id = 20** **THEN**

**INTO** EMP1 (emp_no, emp_name, salary, hire_date, dept_id)

**VALUES** (emp_no, emp_name, salary, hire_date, dept_id)

**WHEN** **dept_id BETWEEN 30 AND 50** **THEN**

**INTO** EMP2 (emp_no, emp_name, salary, hire_date, dept_id)

**VALUES** (emp_no, emp_name, salary, hire_date, dept_id)

**WHEN** **dept_id > 50** THEN

**INTO** EMP3 (emp_no, emp_name, salary, hire_date, dept_id)

**VALUES** (emp_no, emp_name, salary, hire_date, dept_id)

**SELECT** employee_id emp_no, first_name || ' ' || last_name emp_name, salary, hire_date, department_id dept_id

**FROM** employees;

※  EMP1은 DEPT_ID가 20인 데이터만 추출, EMP2은 DEPT_ID가 30 ~ 50 사이인 데이터만 추출, EMP3은 DEPT_ID가 50 이상인 데이터만 추출

TRUNCATE TABLE emp1; TRUNCATE TABLE emp2; TRUNCATE TABLE emp3;

**INSERT ALL**

**WHEN** **salary >= 2500** **THEN**

**INTO** EMP1 (emp_no, emp_name, salary, hire_date, dept_id)

**VALUES** (emp_no, emp_name, salary, hire_date, dept_id)

**WHEN** **salary >= 5000** **THEN**

**INTO** EMP2 (emp_no, emp_name, salary, hire_date, dept_id)

**VALUES** (emp_no, emp_name, salary, hire_date, dept_id)

**WHEN** **salary >= 7000** THEN

**INTO** EMP3 (emp_no, emp_name, salary, hire_date, dept_id)

**VALUES** (emp_no, emp_name, salary, hire_date, dept_id)

**SELECT** employee_id emp_no, first_name || ' ' || last_name emp_name, salary, hire_date, department_id dept_id

**FROM** employees;

SELECT MIN(salary), MAX(salary) FROM EMP1; (2500, 24000)

SELECT MIN(salary), MAX(salary) FROM EMP2; (5800, 24000)

SELECT MIN(salary), MAX(salary) FROM EMP3; (7000, 24000)

## FIRST 기재된 구문

**INSERT FIRST**

**WHEN** **salary >= 2500** **THEN**

**INTO** EMP1 (emp_no, emp_name, salary, hire_date, dept_id)

**VALUES** (emp_no, emp_name, salary, hire_date, dept_id)

**WHEN** **salary >= 5000** **THEN**

**INTO** EMP2 (emp_no, emp_name, salary, hire_date, dept_id)

**VALUES** (emp_no, emp_name, salary, hire_date, dept_id)

**WHEN** **salary >= 7000** THEN

**INTO** EMP3 (emp_no, emp_name, salary, hire_date, dept_id)

**VALUES** (emp_no, emp_name, salary, hire_date, dept_id)

**SELECT** employee_id emp_no, first_name || ' ' || last_name emp_name, salary, hire_date, department_id dept_id

**FROM** employees;

SELECT MIN(salary), MAX(salary) FROM EMP1; (2500, 24000)

SELECT MIN(salary), MAX(salary) FROM EMP2; (null, null)

SELECT MIN(salary), MAX(salary) FROM EMP3; (null, null)

※ employees 테이블의 데이터가 첫 번째 조건을 만족하므로 EMP1 테이블에만 데이터 INSERT

**### UPDATE 구문**

- 테이블에 저장된 데이터를 수정하는 문장
- 컬럼 값을 수정, 조건에 따라 여러 개의 ROW 처리 가능
- 한 번 실행으로 여러 개의 컬럼 값, 여러 개의 ROW 처리 가능
- 어떤 ROW를 수정할 것인지는 WHERE 절에서 처리
- 변경 하려는 컬럼과 변경값은 데이터 형이 맞아야 함
- 변경값 항목에는 표현식, 서브쿼리도 사용 가능
- WHERE 조건을 만족하는 ROW 만 처리됨, WHERE 절 생략 시 전체 ROW에 대해 컬럼

값 변경

- 구문형식

**UPDATE** 테이블명

**S**E**T** 컬럼1 = 변경값1,
